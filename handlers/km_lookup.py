from utils.safe_send import safe_answer, safe_send_message
import re
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from database.db import session
from database.models import LocationInfo
from keyboards.cancel import cancel_keyboard
from states.location_states import EditLocationState

router = Router()

def render_location(km: int, loc: LocationInfo | None) -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not loc:
        return f"üìç <b>{km} –∫–º</b>\n\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
    return f"üìç <b>{km} ‚Äî {loc.title}</b>\n\n{loc.description}"


@router.message(lambda m: m.text and m.text.startswith("/loc_"))
async def cmd_loc_lookup(message: Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ /loc_1234 –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    try:
        code = message.text.lstrip("/").split("@")[0]  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "/" –∏ –∏–º—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if not code.startswith("loc_"):
            return
        km = int(code.replace("loc_", ""))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞
    except Exception:
        await safe_answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    loc = session.query(LocationInfo).filter_by(km=km).first()
    await safe_answer(message, render_location(km, loc), parse_mode="HTML")


@router.message(F.text.regexp(r"^!\s*(\d+)$").as_("match"))
async def exclam_loc_lookup(message: Message, match: re.Match):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ !1234 –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    km = int(match.group(1))
    loc = session.query(LocationInfo).filter_by(km=km).first()
    await safe_answer(message, render_location(km, loc), parse_mode="HTML")


@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def edit_location_start(message: Message, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∏–ª–æ–º–µ—Ç—Ä
    await state.clear()
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=cancel_keyboard())
    await state.set_state(EditLocationState.input_km)


@router.message(EditLocationState.input_km)
async def edit_location_title(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if not message.text.isdigit():
        await safe_answer(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    km = int(message.text)
    loc = session.query(LocationInfo).filter_by(km=km).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.update_data(km=km)
    await safe_answer(message, f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {loc.title}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ - —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å):")
    await state.set_state(EditLocationState.new_title)


@router.message(EditLocationState.new_title)
async def edit_location_description(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(new_title=message.text)
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ - —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å):")
    await state.set_state(EditLocationState.new_description)


@router.message(EditLocationState.new_description)
async def save_location_edits(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    data = await state.get_data()
    loc = session.query(LocationInfo).filter_by(km=data["km"]).first()

    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    if data["new_title"] != "-":
        loc.title = data["new_title"]
    if message.text != "-":
        loc.description = message.text

    session.commit()
    await safe_answer(message, f"‚úÖ –õ–æ–∫–∞—Ü–∏—è {loc.km} –∫–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def delete_location(message: Message, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∏–ª–æ–º–µ—Ç—Ä
    await state.clear()
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=cancel_keyboard())
    await state.set_state(EditLocationState.input_km)


@router.message(EditLocationState.input_km)
async def confirm_delete_location(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é
    if not message.text.isdigit():
        await safe_answer(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    km = int(message.text)
    loc = session.query(LocationInfo).filter_by(km=km).first()

    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        session.delete(loc)
        session.commit()
        await safe_answer(message, f"üóë –õ–æ–∫–∞—Ü–∏—è {km} –∫–º —É–¥–∞–ª–µ–Ω–∞.")
    await state.clear()
