from utils.safe_send import safe_answer, safe_send_message
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from datetime import datetime
from pytz import timezone

from states.pin_states import PinFSM
from database.models import User, RaidEvent, RaidPinSendLog, RaidPinData
from database.db import session
from keyboards.cancel import cancel_keyboard
from keyboards.raid_menu import raid_admin_menu

router = Router()

# üìç –°—Ç–∞—Ä—Ç –≤—ã–¥–∞—á–∏ –ø–∏–Ω–∞: –≤—ã–±–æ—Ä —Ä–µ–π–¥–∞
@router.message(F.text == "üìç –í—ã–¥–∞—Ç—å –ø–∏–Ω –¥–ª—è —Ä–µ–π–¥–∞")
async def start_pin_select_raid(message: Message, state: FSMContext):
    data = await state.get_data()
    raid_id = data.get("raid_id")

    await state.update_data(from_menu="raid_admin")  # –î–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞

    if raid_id:
        raid = session.query(RaidEvent).filter_by(id=raid_id).first()
        if raid:
            await state.update_data(raid_id=raid.id)
            await state.set_state(PinFSM.km)
            await safe_answer(message, "üìç –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12):", reply_markup=cancel_keyboard())
            return

    # –ï—Å–ª–∏ raid_id –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π–¥–æ–≤
    raids = (
        session.query(RaidEvent)
        .filter(RaidEvent.status == "active")
        .order_by(RaidEvent.start_time.asc())
        .all()
    )

    if not raids:
        await safe_answer(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π–¥–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–∏–Ω–∞.")
        return

    await state.update_data(raid_choice_list=[r.id for r in raids])
    await state.set_state(PinFSM.select_raid)
    lines = [
        f"{i+1}. {r.name} (ID {r.id}) ‚Äî {r.start_time.strftime('%d.%m %H:%M')}"
        for i, r in enumerate(raids)
    ]
    await safe_answer(
        message,
        "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π–¥—ã –¥–ª—è –ø–∏–Ω–∞:\n" +
        "\n".join(lines) +
        "\n\n–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä —Ä–µ–π–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=cancel_keyboard()
    )

@router.message(StateFilter(PinFSM.km))
async def pin_enter_km(message: Message, state: FSMContext):
    data = await state.get_data()
    raid_id = data.get("raid_id")
    if not raid_id:
        await safe_answer(message, "‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–π–¥. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã –≤—ã–¥–∞—á–∏ –ø–∏–Ω–∞.")
        await state.clear()
        return

    try:
        km = int(message.text.strip())
        if not (0 <= km <= 100):
            raise ValueError
        await state.update_data(km=km)
        await state.set_state(PinFSM.title)
        await safe_answer(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏–Ω–∞:", reply_markup=cancel_keyboard())
    except:
        await safe_answer(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)", reply_markup=cancel_keyboard())


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π–¥–∞
@router.message(StateFilter(PinFSM.select_raid))
async def pin_select_raid_number(message: Message, state: FSMContext):
    text = message.text.strip()

    # DEBUG: –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    data = await state.get_data()
    print(f"[DEBUG] FSM –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ–π–¥–∞: {data}")

    raid_list = data.get("raid_choice_list")
    if not raid_list:
        await safe_answer(message, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–π–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if not text.isdigit():
        await safe_answer(message, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π–¥–∞ (—á–∏—Å–ª–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return

    idx = int(text) - 1
    if idx < 0 or idx >= len(raid_list):
        await safe_answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–π–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    raid_id = raid_list[idx]
    await state.update_data(raid_id=raid_id)
    await state.set_state(PinFSM.km)
    await safe_answer(message, "üìç –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12):", reply_markup=cancel_keyboard())

# üìç –í–≤–æ–¥ –∫–º
@router.message(StateFilter(PinFSM.km))
async def pin_enter_km(message: Message, state: FSMContext):
    try:
        km = int(message.text.strip())
        if not (0 <= km <= 100):
            raise ValueError
        await state.update_data(km=km)
        await state.set_state(PinFSM.title)
        await safe_answer(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏–Ω–∞:", reply_markup=cancel_keyboard())
    except:
        await safe_answer(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)", reply_markup=cancel_keyboard())

# üìç –í–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.message(StateFilter(PinFSM.title))
async def pin_enter_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(PinFSM.text)
    await safe_answer(message, "üí¨ –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=cancel_keyboard())

# üìç –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
@router.message(StateFilter(PinFSM.text))
async def pin_enter_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    data = await state.get_data()
    raid = session.query(RaidEvent).filter_by(id=data.get("raid_id")).first()

    if not raid:
        await safe_answer(message, "‚ùå –†–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    moscow = timezone("Europe/Moscow")
    start_time = raid.start_time
    start_time = moscow.localize(start_time) if start_time.tzinfo is None else start_time.astimezone(moscow)
    raid_dt = start_time.strftime("%d.%m.%Y %H:%M")

    preview = (
        f"<b>{data['title']}</b>\n"
        f"üìç {data['km']} –∫–º\n"
        f"üîó <b>–†–µ–π–¥:</b> {raid.name}\n"
        f"üïì <b>–í—Ä–µ–º—è:</b> {raid_dt}\n\n"
        f"{data['description']}"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
    )

    await safe_answer(message, f"üì§ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏–Ω–∞:\n\n{preview}", parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(PinFSM.confirm)

# üìç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∏–Ω–∞
@router.message(StateFilter(PinFSM.confirm), F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def pin_editing(message: Message, state: FSMContext):
    await state.set_state(PinFSM.km)
    await safe_answer(message, "‚Ü©Ô∏è –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", reply_markup=cancel_keyboard())


# üìç –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–∞
@router.message(StateFilter(PinFSM.confirm), F.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω")
async def pin_send(message: Message, state: FSMContext):
    data = await state.get_data()
    raid = session.query(RaidEvent).filter_by(id=data.get("raid_id")).first()

    if not raid:
        await safe_answer(message, "‚ùå –†–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–Ω–∞ –¥–ª—è —Ä–µ–π–¥–∞
    existing = session.query(RaidPinData).filter_by(raid_id=raid.id).first()
    if existing:
        existing.title = data["title"]
        existing.km = data["km"]
        existing.description = data["description"]
    else:
        session.add(RaidPinData(
            raid_id=raid.id,
            title=data["title"],
            km=data["km"],
            description=data["description"]
        ))
    session.commit()

    squad = raid.squad
    if squad == "ALL_USERS":
        users = session.query(User).all()
    elif squad == "ALL_SQUADS":
        users = session.query(User).filter(User.squad.isnot(None)).all()
    else:
        users = session.query(User).filter(User.squad.in_([s.strip() for s in squad.split(",")])).all()

    pin_text = (
        f"<b>{data['title']}</b>\n"
        f"üìç {data['km']} –∫–º\n\n"
        f"{data['description']}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öî –Ø –∏–¥—É!", callback_data=f"raid_join_{raid.id}")],
        [InlineKeyboardButton(text="üö´ –Ø –Ω–µ –∏–¥—É", callback_data=f"raid_leave_{raid.id}")],
        [InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"remind_{raid.id}")]
    ])

    count = 0
    for user in users:
        if user.game_id:
            try:
                await safe_send_message(
                    bot=message.bot,
                    chat_id=user.game_id,
                    text=pin_text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                log = RaidPinSendLog(
                    admin_id=message.from_user.id,
                    raid_id=raid.id,
                    target_id=user.id,
                    pin_text=pin_text,
                    sent_at=datetime.utcnow(),
                )
                session.add(log)
                count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–∞: {e}")
                continue

    session.commit()
    await safe_answer(message, f"‚úÖ –ü–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {count} –∏–≥—Ä–æ–∫–∞–º.", reply_markup=raid_admin_menu())
    await state.clear()
