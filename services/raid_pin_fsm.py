from utils.safe_send import safe_answer, safe_send_message

from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.raid_states import RaidAlert
from database.models import User
from database.db import session
from keyboards.cancel import cancel_keyboard

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ü–ò–ù-—Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
async def start_pin_fsm(message: Message, state: FSMContext, from_menu: str = "raid_admin"):
    await state.clear()
    await state.update_data(from_menu=from_menu)
    await safe_answer(message, "üïî –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–π–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:00):", reply_markup=cancel_keyboard())
    await state.set_state(RaidAlert.time)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ü–ò–ù-—Å–æ–æ–±—â–µ–Ω–∏—è
async def process_pin_step(state: FSMContext, step: str, message: Message) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è
    if (message.text or "").lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        from keyboards.raid_menu import raid_admin_menu
        await safe_answer(message, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=raid_admin_menu())
        return False

    # –®–∞–≥ 1: –í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ —Å–±–æ—Ä–∞
    if step == "time":
        await state.update_data(time=message.text)
        await safe_answer(message, "üìå –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Å–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∫–º):")
        await state.set_state(RaidAlert.location)

    # –®–∞–≥ 2: –í–≤–µ–¥–µ–Ω–æ –º–µ—Å—Ç–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    elif step == "location":
        await state.update_data(location=message.text)
        await safe_answer(message, "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(RaidAlert.pin_value)

    # –®–∞–≥ 3: –í–≤–µ–¥–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–¥—ã –∏–ª–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º"
    elif step == "pin_value":
        dop_text = "" if message.text.strip() == "-" else message.text.strip()
        await state.update_data(dop_text=dop_text)

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç—Ä—è–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        squads = session.query(User.squad).distinct().all()
        buttons = [[KeyboardButton(text=s[0])] for s in squads if s[0]]
        buttons.append([KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º")])
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        await safe_answer(message, "üéØ –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–ò–ù?", reply_markup=keyboard)
        await state.set_state(RaidAlert.confirm)

    return True
