from aiogram.filters import StateFilter
from states.report_states import ReportBuilder
from utils.safe_send import safe_answer
from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import func
from database.db import session
from database.models import User, RaidEvent, RaidParticipation, RaidPinSendLog
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from keyboards.cancel import cancel_keyboard
from services.navigation import return_to_raid_menu

router = Router()


@router.message(F.text == "üìä –û—Ç—á—ë—Ç –ø–æ —É—á–∞—Å—Ç–∏—é")
async def participation_report(message: Message):
    now = datetime.utcnow()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    week_ago = now - timedelta(days=7)  # –í—Ä–µ–º—è –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥

    # –ó–∞–ø—Ä–æ—Å: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö —É—á–∞—Å—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    report = (
        session.query(User.nickname, func.count(RaidParticipation.id))
        .join(RaidParticipation, User.id == RaidParticipation.user_id)
        .join(RaidEvent, RaidEvent.id == RaidParticipation.raid_id)
        .filter(RaidEvent.start_time >= week_ago)  # –¢–æ–ª—å–∫–æ —Ä–µ–π–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        .group_by(User.nickname)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        .order_by(func.count(RaidParticipation.id).desc())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
        .all()
    )

    if not report:
        await safe_answer(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é.")
        await return_to_raid_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    lines = [f"{i+1}. <b>{nick}</b> ‚Äî {count}" for i, (nick, count) in enumerate(report)]
    await safe_answer(
        message,
        "<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:</b>\n" + "\n".join(lines),
        parse_mode="HTML"
    )
    await return_to_raid_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


@router.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ–π–¥–∞")
async def raid_participant_report(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–π–¥–æ–≤ –∏–∑ –ë–î
    raids = (
        session.query(RaidEvent)
        .order_by(RaidEvent.start_time.desc())
        .limit(10)
        .all()
    )

    if not raids:
        await safe_answer(message, "üì≠ –ù–µ—Ç —Ä–µ–π–¥–æ–≤.")
        await return_to_raid_menu(message)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–µ–π–¥–æ–≤
    raid_ids = [r.id for r in raids]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —Ä–µ–π–¥–∞
    lines = [
        f"{i+1}. –†–µ–π–¥ #{r.id} ‚Äî {r.name}\n"
        f"    üïì {r.start_time.strftime('%d.%m %H:%M')}"
        for i, r in enumerate(raids)
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(raid_list=raid_ids)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ä–µ–π–¥–∞
    await safe_answer(
        message,
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä:</b>\n\n" + "\n\n".join(lines),
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(ReportBuilder.filter_value)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞


@router.message(StateFilter(ReportBuilder.filter_value), F.text.regexp(r"^\d+$").as_("match"))
async def raid_number_choice(message: Message, state: FSMContext, match):
    data = await state.get_data()
    raid_list = data.get("raid_list")  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–µ–π–¥–æ–≤
    if not raid_list:
        await safe_answer(message, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–π–¥–∞.")
        await return_to_raid_menu(message)
        return

    idx = int(message.text.strip()) - 1  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π–¥–∞
    if idx < 0 or idx >= len(raid_list):
        await safe_answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–π–¥–∞.")
        return

    raid_id = raid_list[idx]  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π–¥–∞
    raid = session.query(RaidEvent).filter_by(id=raid_id).first()
    if not raid:
        await safe_answer(message, "‚ùå –†–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await return_to_raid_menu(message)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä–µ–π–¥–∞
    parts = (
        session.query(User.nickname, User.id, RaidParticipation.status, RaidParticipation.joined_at)
        .join(User, User.id == RaidParticipation.user_id)
        .filter(RaidParticipation.raid_id == raid_id)
        .all()
    )

    # –†–∞–∑–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    signed = [(n, t) for n, uid, s, t in parts if s == "–∑–∞–ø–∏—Å–∞–ª—Å—è"]
    refused = [(n, t) for n, uid, s, t in parts if s == "–æ—Ç–∫–∞–∑–∞–ª—Å—è"]
    signed_ids = [uid for _, uid, s, _ in parts if s == "–∑–∞–ø–∏—Å–∞–ª—Å—è"]
    refused_ids = [uid for _, uid, s, _ in parts if s == "–æ—Ç–∫–∞–∑–∞–ª—Å—è"]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
    invited_ids = [
        r.target_id for r in session.query(RaidPinSendLog.target_id)
        .filter_by(raid_id=raid_id)
        .distinct()
        .all()
    ]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ
    not_responded_ids = set(invited_ids) - set(signed_ids) - set(refused_ids)
    not_responded = session.query(User.nickname).filter(User.id.in_(not_responded_ids)).all()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
    def format_list(users):
        return "\n".join(f"‚Ä¢ {n} ({t.strftime('%d.%m %H:%M')})" for n, t in users) if users else "‚Äî"

    def format_simple(users):
        return "\n".join(f"‚Ä¢ {n.nickname}" for n in users) if users else "‚Äî"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    await safe_answer(
        message,
        f"üìã <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ–π–¥–∞: {raid.name}</b>\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(invited_ids)}\n\n"
        f"‚öî –ó–∞–ø–∏—Å–∞–ª–∏—Å—å ({len(signed)}):\n{format_list(signed)}\n\n"
        f"üö´ –û—Ç–∫–∞–∑–∞–ª–∏—Å—å ({len(refused)}):\n{format_list(refused)}\n\n"
        f"‚ùî –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ ({len(not_responded)}):\n{format_simple(not_responded)}",
        parse_mode="HTML"
    )
    await return_to_raid_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_raid_selection(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await return_to_raid_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
