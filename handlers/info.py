from utils.safe_send import safe_answer, safe_send_message
from aiogram import Router, F
from aiogram.types import Message
from database.models import User, PlayerProfile
from database.db import session
from zoneinfo import ZoneInfo
from sqlalchemy import func

router = Router()


@router.message(F.text == "/me")
async def show_own_profile(message: Message):
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –µ–≥–æ Telegram ID
    user = session.query(User).filter_by(game_id=message.from_user.id).first()
    if not user:
        await safe_answer(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await safe_answer(message, format_user_info(user), parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] /me: {e}")
        await safe_answer(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@router.message(F.text.regexp(r"^/info_(.+)$").as_("match"))
async def show_profile_by_direct_command(message: Message, match):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /info_–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ /info_ID
    query = match.group(1).strip()
    user = try_get_user_from_text(query)
    if not user:
        await safe_answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await safe_answer(message, format_user_info(user), parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] /info_<user>: {e}")
        await safe_answer(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@router.message(lambda m: m.text and m.text.startswith("/info"))
async def show_other_profile(message: Message):
    text = message.text.strip()
    parts = text.split(maxsplit=1)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    command = parts[0].split("@")[0]
    arg = parts[1].strip() if len(parts) > 1 else None

    target_id = None

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message:
        if message.reply_to_message.forward_from:
            target_id = message.reply_to_message.forward_from.id
        else:
            target_id = message.reply_to_message.from_user.id

    elif arg:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–µ–º—É
        user = try_get_user_from_text(arg)
        if not user:
            await safe_answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await safe_answer(message, format_user_info(user), parse_mode="HTML")
        return

    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä–µ–ø–ª–∞—è –∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    if not target_id:
        await safe_answer(message,
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ <code>/info</code> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ <code>/info ID</code> –∏–ª–∏ <code>/info –ù–∏–∫</code>\n"
            "‚Ä¢ <code>/info_–ù–∏–∫</code> –∏–ª–∏ <code>/info_ID</code> ‚Äî –Ω–∞–ø—Ä—è–º—É—é",
            parse_mode="HTML"
        )
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É ID
    user = session.query(User).filter_by(game_id=target_id).first()
    if not user:
        await safe_answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await safe_answer(message, format_user_info(user), parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] /info: {e}")
        await safe_answer(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–æ—Ñ–∏–ª—è.")


def try_get_user_from_text(text: str):
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É (ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É)
    if text.isdigit():
        return session.query(User).filter_by(game_id=int(text)).first()
    return session.query(User).filter(func.lower(User.nickname) == text.lower()).first()


def format_user_info(user: User) -> str:
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = session.query(PlayerProfile).filter_by(game_id=user.game_id).first()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    faction = user.faction or (profile.faction if profile else None) or "-"
    squad = user.squad or (profile.squad if profile else None) or "-"

    base = (
        f"üìü <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n"
        f"üÜî <b>ID:</b> {user.game_id}\n"
        f"üßë <b>–ù–∏–∫:</b> {user.nickname}\n"
        f"‚öõÔ∏è <b>–§—Ä–∞–∫—Ü–∏—è:</b> {faction}\n"
        f"ü§ü <b>–ë–∞–Ω–¥–∞:</b> {squad}\n"
        f"üé≠ <b>–†–æ–ª—å:</b> {user.role or '-'}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {user.created_at.replace(tzinfo=ZoneInfo('UTC')).astimezone(ZoneInfo('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
    )

    if not profile:
        return base + "\n‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

    detailed = (
        #f"\n‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {profile.health_current}/{profile.health_max}\n"
        f"\n‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {profile.health_max}\n"
        f"‚öîÔ∏è <b>–£—Ä–æ–Ω:</b> {profile.damage or 0} | üõ° <b>–ë—Ä–æ–Ω—è:</b> {profile.armor or 0}\n"
        f"üí™ –°–∏–ª–∞: {profile.strength or 0} | üéØ –ú–µ—Ç–∫–æ—Å—Ç—å: {profile.accuracy or 0}\n"
        f"üó£ –•–∞—Ä–∏–∑–º–∞: {profile.charisma or 0} | ü§∏üèΩ‚Äç‚ôÇÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å: {profile.agility or 0}\n"
        #f"üîã –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {profile.stamina_current}/{profile.stamina_max}\n"
        f"üîã –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {profile.stamina_max}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {profile.location or '-'} ({profile.distance_km or 0} –∫–º)\n"
        f"\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {profile.updated_at.replace(tzinfo=ZoneInfo('UTC')).astimezone(ZoneInfo('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}"
    )

    return base + detailed
