from utils.safe_send import safe_answer
import re
from aiogram.types import Message
from datetime import datetime
from database.db import session
from database.models import PlayerProfile, User


async def parse_full_profile(message: Message, silent: bool = False, added_by_admin: bool = False):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    text = message.text
    lines = [line.strip() for line in text.splitlines() if line.strip()]

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    data = {}
    gear_lines = []
    in_gear_block = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"

    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for idx, line in enumerate(lines):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ —Ñ—Ä–∞–∫—Ü–∏—é
        if re.search(r",\s+‚öõÔ∏è", line):
            match = re.match(r"(.+),\s+‚öõÔ∏è(.+)", line)
            if match:
                data["nickname"], data["faction"] = match.groups()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–Ω–¥—É (—Åquad)
        if "–ë–∞–Ω–¥–∞:" in line:
            data["squad"] = line.split(":", 1)[-1].strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ (—Ç–µ–∫—É—â–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ)
        if "–ó–¥–æ—Ä–æ–≤—å–µ" in line:
            nums = re.findall(r"\d+", line)
            if len(nums) == 2:
                data["health_current"], data["health_max"] = map(int, nums)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞
        if "–ì–æ–ª–æ–¥" in line:
            if match := re.search(r"(\d+)%", line):
                data["hunger"] = int(match.group(1))

        # –£—Ä–æ–Ω
        if "‚öîÔ∏è–£—Ä–æ–Ω" in line:
            if match := re.search(r"‚öîÔ∏è–£—Ä–æ–Ω: (\d+)", line):
                data["damage"] = int(match.group(1))

        # –ë—Ä–æ–Ω—è
        if "üõ°–ë—Ä–æ–Ω—è" in line:
            if match := re.search(r"üõ°–ë—Ä–æ–Ω—è: (\d+)", line):
                data["armor"] = int(match.group(1))

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –°–∏–ª–∞, –ú–µ—Ç–∫–æ—Å—Ç—å, –•–∞—Ä–∏–∑–º–∞, –õ–æ–≤–∫–æ—Å—Ç—å
        if "–°–∏–ª–∞:" in line or "–ú–µ—Ç–∫–æ—Å—Ç—å:" in line or "–•–∞—Ä–∏–∑–º–∞:" in line or "–õ–æ–≤–∫–æ—Å—Ç—å:" in line:
            if match := re.search(r"üí™–°–∏–ª–∞: (\d+)", line):
                data["strength"] = int(match.group(1))
            if match := re.search(r"üéØ–ú–µ—Ç–∫–æ—Å—Ç—å: (\d+)", line):
                data["accuracy"] = int(match.group(1))
            if match := re.search(r"üó£–•–∞—Ä–∏–∑–º–∞: (\d+)", line):
                data["charisma"] = int(match.group(1))
            if match := re.search(r"ü§∏üèΩ‚Äç‚ôÇÔ∏è–õ–æ–≤–∫–æ—Å—Ç—å: (\d+)", line):
                data["agility"] = int(match.group(1))

        # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
        if "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å" in line:
            nums = re.findall(r"\d+", line)
            if len(nums) == 2:
                data["stamina_current"], data["stamina_max"] = map(int, nums)

        # –õ–æ–∫–∞—Ü–∏—è –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if "üìç" in line:
            if match := re.search(r"üìç(.+?),", line):
                data["location"] = match.group(1).strip()
            if match := re.search(r"(\d+)–∫–º", line):
                data["distance_km"] = int(match.group(1))

        # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"
        if line.startswith("–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"):
            in_gear_block = True
            continue
        if in_gear_block:
            if any(line.startswith(x) for x in ("–†–µ—Å—É—Ä—Å—ã", "–†–µ–ø—É—Ç–∞—Ü–∏—è", "ID", "–†–µ–π–¥ –≤")):
                in_gear_block = False
            else:
                gear_lines.append(line)

        # –ö—Ä—ã—à–∫–∏
        if "–ö—Ä—ã—à–∫–∏" in line:
            if match := re.search(r"–ö—Ä—ã—à–∫–∏:\s*(\d+)", line):
                data["caps"] = int(match.group(1))

        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        if "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" in line:
            if match := re.search(r"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\s*(\d+)", line):
                data["materials"] = int(match.group(1))

        # –ü—É–ø—Å—ã
        if "–ü—É–ø—Å—ã" in line:
            if match := re.search(r"–ü—É–ø—Å—ã:\s*(\d+)", line):
                data["bobbleheads"] = int(match.group(1))

        # –†–µ–ø—É—Ç–∞—Ü–∏—è
        if line.startswith("–†–µ–ø—É—Ç–∞—Ü–∏—è"):
            if idx + 1 < len(lines):
                rep_line = lines[idx + 1]
                if not rep_line.startswith("ID") and not rep_line.startswith("üèµ"):
                    data["reputation"] = rep_line.strip()

        # Game ID
        if match := re.search(r"ID(\d+)", line):
            data["game_id"] = int(match.group(1))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π–¥–µ
        if "–†–µ–π–¥ –≤" in line:
            data["raid_time"] = line.split(":", 1)[-1].strip()
            if idx + 1 < len(lines):
                raid_line = lines[idx + 1]
                data["raid_location"] = raid_line.strip()
                if match := re.search(r"üï≥\+(\d+)", raid_line):
                    data["raid_reward_caps"] = int(match.group(1))
                if match := re.search(r"üì¶\+(\d+)", raid_line):
                    data["raid_reward_materials"] = int(match.group(1))
                extra = re.sub(r"üï≥\+\d+|üì¶\+\d+", "", raid_line).strip()
                if extra:
                    data["raid_reward_other"] = extra

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    if gear_lines:
        data["gear"] = "\n".join(gear_lines)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è game_id
    if not data.get("game_id"):
        if not silent:
            await safe_answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID.")
        return

    # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
    profile = session.query(PlayerProfile).filter_by(game_id=data["game_id"]).first()
    if not profile:
        profile = PlayerProfile(game_id=data["game_id"])
        session.add(profile)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è
    for k, v in data.items():
        setattr(profile, k, v)
    profile.updated_at = datetime.utcnow()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å
    if message.from_user.id == data["game_id"]:
        profile.added_by_admin = False
        profile.added_by_admin_id = None
    elif added_by_admin:
        profile.added_by_admin = True
        profile.added_by_admin_id = message.from_user.id

    # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter_by(game_id=data["game_id"]).first()
    if not user:
        user = User(
            game_id=data["game_id"],
            nickname=data.get("nickname") or f"user_{data['game_id']}",
            faction=data.get("faction"),
            squad=data.get("squad"),
        )
        session.add(user)
    else:
        if data.get("nickname"):
            user.nickname = data["nickname"]
        if data.get("faction"):
            user.faction = data["faction"]
        if data.get("squad"):
            user.squad = data["squad"]
        if data.get("role"):
            user.role = data["role"]

    session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–ª—á–∞—Ç—å
    if not silent:
        await safe_answer(message, f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å <b>{profile.nickname or '–∏–≥—Ä–æ–∫–∞'}</b> –æ–±–Ω–æ–≤–ª—ë–Ω.", parse_mode="HTML")


def extract_nickname_and_game_id(message: Message) -> tuple[str, int] | None:
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ game_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text
    if not text:
        return None
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    nickname = None
    game_id = None

    for line in lines:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ —Ñ—Ä–∞–∫—Ü–∏–∏
        if not nickname and re.search(r",\s+‚öõÔ∏è", line):
            match = re.match(r"(.+),\s+‚öõÔ∏è(.+)", line)
            if match:
                nickname = match.group(1)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ game_id
        if not game_id:
            match = re.search(r"ID(\d+)", line)
            if match:
                game_id = int(match.group(1))

        # –ï—Å–ª–∏ –æ–±–∞ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if nickname and game_id:
            return nickname, game_id

    return None
