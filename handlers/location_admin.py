from utils.safe_send import safe_answer, safe_send_message
import re
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from database.db import session
from database.models import LocationInfo
from keyboards.location_menu import location_admin_menu
from states.location_states import AddLocationState
from keyboards.cancel import cancel_keyboard

router = Router()

# –®–∞–≥ 1: –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@router.message(F.text == "üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def ask_add_method(message: Message, state: FSMContext):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"), KeyboardButton(text="üì® –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await state.clear()
    await safe_answer(message, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é?", reply_markup=kb)
    await state.set_state(AddLocationState.choose_method)

# –®–∞–≥ 2–ê: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏
@router.message(F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def manual_input_km(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞:", reply_markup=cancel_keyboard())
    await state.set_state(AddLocationState.manual_km)

@router.message(AddLocationState.manual_km)
async def manual_input_title(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if not message.text.isdigit():
        await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(km=int(message.text))
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=cancel_keyboard())
    await state.set_state(AddLocationState.manual_title)

@router.message(AddLocationState.manual_title)
async def manual_input_description(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    await state.update_data(title=message.text)
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=cancel_keyboard())
    await state.set_state(AddLocationState.manual_description)

@router.message(AddLocationState.manual_description)
async def manual_save(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
    await state.update_data(description=message.text)
    data = await state.get_data()

    existing = session.query(LocationInfo).filter_by(km=data["km"]).first()
    if existing:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ–º –∫–º —É–∂–µ –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        await state.clear()
        return

    loc = LocationInfo(
        km=data["km"],
        title=data["title"],
        description=data["description"]
    )
    session.add(loc)
    session.commit()
    await safe_answer(message, f"‚úÖ –õ–æ–∫–∞—Ü–∏—è {data['km']} –∫–º –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

# –®–∞–≥ 2–ë: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(F.text == "üì® –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def wait_forwarded_location(message: Message, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.clear()
    await state.update_data(from_menu="admin_locations")
    await safe_answer(message, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏.", reply_markup=cancel_keyboard())
    await state.set_state(AddLocationState.forwarded_text)

@router.message(AddLocationState.forwarded_text)
async def handle_forwarded_location(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏
    text = message.text or message.caption or ""
    cleaned = re.sub(r"#\S+", "", text)  # –£–¥–∞–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏

    km_match = re.search(r"(\d{1,3})\s*–∫–º", cleaned)
    title_match = re.match(r"[^\n\(]{3,}", cleaned.strip())

    if not km_match:
        await safe_answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '27 –∫–º'). –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é.")
        return

    km = int(km_match.group(1))
    title = title_match.group(0).strip().split("\n")[0] if title_match else f"{km} –∫–º"
    description = cleaned.replace(title, "", 1).strip()

    existing = session.query(LocationInfo).filter_by(km=km).first()
    if existing:
        await state.update_data(from_menu="admin_locations")
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ–º –∫–º —É–∂–µ –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        await state.clear()
        return

    loc = LocationInfo(km=km, title=title, description=description)
    session.add(loc)
    session.commit()

    await state.clear()
    await safe_answer(message,
        f"‚úÖ –õ–æ–∫–∞—Ü–∏—è {km} –∫–º ({title}) –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
        reply_markup=location_admin_menu()
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π
@router.message(F.text == "üìÑ –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π")
async def list_locations(message: Message):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
    locations = session.query(LocationInfo).order_by(LocationInfo.km).all()
    if not locations:
        await safe_answer(message, "üì≠ –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    lines = [f"{loc.km} –∫–º ‚Äî {loc.title}" for loc in locations]
    await safe_answer(message, "<b>üìç –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π:</b>\n\n" + "\n".join(lines), parse_mode="HTML")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
from states.location_states import EditLocationState

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def start_edit_location(message: Message, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    await state.clear()
    await state.update_data(from_menu="admin_locations")

    locations = session.query(LocationInfo).order_by(LocationInfo.km.desc()).limit(10).all()
    if not locations:
        await safe_answer(message, "üì≠ –õ–æ–∫–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = [f"‚Ä¢ {loc.km} –∫–º ‚Äî {loc.title} (/edit_loc_{loc.km})" for loc in locations]
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n" + "\n".join(lines)
    text += "\n\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –≤—Ä—É—á–Ω—É—é:"

    await safe_answer(message, text, parse_mode="HTML", reply_markup=cancel_keyboard())
    await state.set_state(EditLocationState.input_km)

@router.message(F.text.regexp(r"^/edit_loc_(\d{1,3})$").as_("match"))
async def trigger_edit_by_command(message: Message, match: re.Match, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /edit_loc_... –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    km = int(match.group(1))
    loc = session.query(LocationInfo).filter_by(km=km).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.clear()
    await state.update_data(km=km, from_menu="admin_locations")
    await state.set_state(EditLocationState.choose_field)

    await safe_answer(message,
        f"üìù <b>{loc.km} –∫–º ‚Äî {loc.title}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n\n{loc.description}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫"), KeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
            ],
            resize_keyboard=True
        )
    )

@router.message(EditLocationState.choose_field)
async def handle_field_choice(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = message.text.strip()
    data = await state.get_data()
    loc = session.query(LocationInfo).filter_by(km=data["km"]).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    if text == "üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫":
        await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=cancel_keyboard())
        await state.set_state(EditLocationState.new_title)

    elif text == "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ":
        await safe_answer(message,
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n{loc.description}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):",
            parse_mode="HTML",
            reply_markup=cancel_keyboard()
        )
        await state.set_state(EditLocationState.new_description)

    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await safe_answer(message, "‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=location_admin_menu())

    else:
        await safe_answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π.")

@router.message(EditLocationState.new_title)
async def save_new_title(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞—Ü–∏–∏
    title = message.text.strip()
    data = await state.get_data()
    loc = session.query(LocationInfo).filter_by(km=data["km"]).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    if title != "-":
        loc.title = title
        session.commit()

    await state.clear()
    await safe_answer(message, f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞—Ü–∏–∏ {loc.km} –∫–º –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=location_admin_menu())

@router.message(EditLocationState.input_km)
async def ask_new_description(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
    if not message.text.isdigit():
        await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    km = int(message.text)
    loc = session.query(LocationInfo).filter_by(km=km).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.update_data(km=km)
    await safe_answer(message,
        f"üìù –¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: <b>{loc.title}</b>\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n{loc.description}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(EditLocationState.new_description)

@router.message(EditLocationState.new_description)
async def save_new_description(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    data = await state.get_data()
    loc = session.query(LocationInfo).filter_by(km=data["km"]).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    if message.text.strip() != "-":
        loc.description = message.text.strip()
        session.commit()

    await state.clear()
    await safe_answer(message, f"‚úÖ –õ–æ–∫–∞—Ü–∏—è {loc.km} –∫–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=location_admin_menu())

# –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
class DeleteLocationState(StatesGroup):
    km = State()

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def start_delete_location(message: Message, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    await state.clear()
    await state.update_data(from_menu="admin_locations")
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=cancel_keyboard())
    await state.set_state(DeleteLocationState.km)

@router.message(DeleteLocationState.km)
async def confirm_delete_location(message: Message, state: FSMContext):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–º
    if not message.text.isdigit():
        await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    km = int(message.text)
    loc = session.query(LocationInfo).filter_by(km=km).first()
    if not loc:
        await safe_answer(message, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    session.delete(loc)
    session.commit()
    await state.clear()
    await safe_answer(message, f"üóë –õ–æ–∫–∞—Ü–∏—è {km} –∫–º —É–¥–∞–ª–µ–Ω–∞.", reply_markup=location_admin_menu())
