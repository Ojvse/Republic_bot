from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from database.db import session
from database.models import GuidePage, LocationInfo
from keyboards.admin_menu import guidepage_admin_menu
from keyboards.cancel import cancel_keyboard
from keyboards.delete_confirm import delete_confirm_keyboard
from states.guidepage_states import AddGuidePage, EditGuidePage, DeleteGuidePage, GuidePaginationState
from utils.safe_send import safe_answer

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ITEMS_PER_PAGE = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–∞–π–¥–æ–≤
DELETE_PAGE_SIZE = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–π–¥–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
pending_deletions = {}  # –°–ª–æ–≤–∞—Ä—å: –∫–ª—é—á ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–¥ –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≥–∞–π–¥–æ–≤
def render_guide_tree(parent_code=None, level=0):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –≥–∞–π–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
    guides = (
        session.query(GuidePage)
        .filter_by(parent_code=parent_code)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–¥—É —Ä–æ–¥–∏—Ç–µ–ª—è
        .order_by(GuidePage.created_at)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        .all()
    )
    lines = []
    for guide in guides:
        indent = "  " * level  # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        icon = "üìÇ" if guide.text is None else "üìÑ"  # –ò–∫–æ–Ω–∫–∞: –ø–∞–ø–∫–∞ (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç) –∏–ª–∏ —Ñ–∞–π–ª
        lines.append(f"{indent}{icon} {guide.title} ‚Äî /{guide.code}")  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–µ—Ä–µ–≤–æ
        lines += render_guide_tree(guide.code, level + 1)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–∞–π–¥—ã
    return lines  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–µ—Ä–µ–≤–∞


@router.message(F.text == "üìö –ì–∞–π–¥—ã")
async def show_guides_menu(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≥–∞–π–¥–æ–≤ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
    root_guides = session.query(GuidePage).filter_by(parent_code=None).order_by(GuidePage.created_at).all()

    if not root_guides:
        # –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤—ã—Ö –≥–∞–π–¥–æ–≤ –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await safe_answer(message, "üì≠ –ì–∞–π–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    text = "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∞–π–¥—ã:</b>\n\n"
    for guide in root_guides:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –≥–∞–π–¥–æ–≤
        text += f"‚Ä¢ /{guide.code} ‚Äî {guide.title}\n"

    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤."
    await safe_answer(message, text, parse_mode="HTML")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –ö–æ–º–∞–Ω–¥–∞ /guide
@router.message(F.text == "üìò –ì–∞–π–¥—ã (—Ä–∞–∑–¥–µ–ª—ã)")
async def open_guide_admin_menu(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await safe_answer(message, "üìò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≥–∞–π–¥–æ–≤:",
                      reply_markup=guidepage_admin_menu())  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é –≥–∞–π–¥–æ–≤


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞
@router.message(lambda m: m.text and "–î–æ–±–∞–≤–∏—Ç—å –≥–∞–π–¥" in m.text)
async def start_add_page(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(from_menu="admin_guides")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥–∞–π–¥–∞:", reply_markup=cancel_keyboard())  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await state.set_state(AddGuidePage.title)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(AddGuidePage.title))
async def input_parent_code(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
    lines = render_guide_tree()
    tree_text = "\n".join(lines)

    await safe_answer(message,
                      "–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞</b> (–∏–ª–∏ <code>-</code> –¥–ª—è –∫–æ—Ä–Ω—è):\n\n" + tree_text,
                      parse_mode="HTML",
                      reply_markup=cancel_keyboard()
                      )
    await state.set_state(AddGuidePage.parent_code)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(AddGuidePage.parent_code))
async def input_text(message: Message, state: FSMContext):
    raw = message.text.strip().lstrip("/").split("@")[0]
    parent = None if raw == "-" else raw  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è

    if parent is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
        exists = session.query(GuidePage).filter_by(code=parent).first()
        if not exists:
            await safe_answer(message, "‚ùå –†–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return

    await state.update_data(parent_code=parent)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–∏–ª–∏ - –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª):",
                      reply_markup=cancel_keyboard())  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    await state.set_state(AddGuidePage.text)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(AddGuidePage.text))
async def suggest_code(message: Message, state: FSMContext):
    await state.update_data(text=None if message.text.strip() == "-" else message.text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç

    data = await state.get_data()
    parent_code = data["parent_code"] or "root"  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    existing_codes = session.query(GuidePage.code).filter(
        GuidePage.parent_code == data["parent_code"]
    ).all()

    suffixes = []
    for c in existing_codes:
        parts = c[0].split("_")
        if len(parts) > 1 and parts[0] == parent_code and parts[-1].isdigit():
            suffixes.append(int(parts[-1]))
    next_suffix = max(suffixes) + 1 if suffixes else 0
    suggested = f"{parent_code}_{next_suffix}" if parent_code != "root" else f"g_{next_suffix}"

    await state.update_data(suggested_code=suggested)  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    await safe_answer(message,
                      f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫–æ–¥: <code>{suggested}</code>\n"
                      f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π.",
                      parse_mode="HTML",
                      reply_markup=cancel_keyboard()
                      )
    await state.set_state(AddGuidePage.code)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(AddGuidePage.code))
async def save_page(message: Message, state: FSMContext):
    data = await state.get_data()
    user_code = message.text.strip()
    code = data["suggested_code"] if user_code.lower() in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                                           "skip"] else user_code  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥

    if session.query(GuidePage).filter_by(code=code).first():
        await safe_answer(message, "‚ùå –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥–∞–π–¥
    page = GuidePage(
        code=code,
        title=data["title"],
        parent_code=data["parent_code"],
        text=data["text"]
    )
    session.add(page)
    session.commit()
    await safe_answer(message, f"‚úÖ –ì–∞–π–¥ /{page.code} –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await safe_answer(message, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–∞–π–¥–æ–≤:", reply_markup=guidepage_admin_menu())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

@router.message(lambda m: m.text and "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–∞–π–¥" in m.text)
async def start_edit(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(from_menu="admin_guides")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –≥–∞–π–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ
    lines = render_guide_tree()
    if not lines:
        await safe_answer(message, "üì≠ –ì–∞–π–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>\n\n" + "\n".join(lines)
    await safe_answer(message, text.strip(), parse_mode="HTML", reply_markup=cancel_keyboard())
    await state.set_state(EditGuidePage.target_code)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(EditGuidePage.target_code))
async def input_new_title(message: Message, state: FSMContext):
    code = message.text.strip().lstrip("/").split("@")[0]
    page = session.query(GuidePage).filter_by(code=code).first()
    if not page:
        await safe_answer(message, "‚ùå –ì–∞–π–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    await state.update_data(target_code=code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –≥–∞–π–¥–∞
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ - —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=cancel_keyboard())
    await state.set_state(EditGuidePage.new_title)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(EditGuidePage.new_title))
async def input_new_text(message: Message, state: FSMContext):
    await state.update_data(new_title=message.text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await safe_answer(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ - —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=cancel_keyboard())
    await state.set_state(EditGuidePage.new_text)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM


@router.message(StateFilter(EditGuidePage.new_text))
async def save_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    code = data.get("target_code")
    page = session.query(GuidePage).filter_by(code=code).first()
    if not page:
        await safe_answer(message, "‚ùå –ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç –≥–∞–π–¥–∞
    if data["new_title"] != "-":
        page.title = data["new_title"]
    if message.text.strip() != "-":
        page.text = message.text.strip()

    session.commit()
    await safe_answer(message, f"‚úÖ –ì–∞–π–¥ /{code} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()
    await safe_answer(message, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–∞–π–¥–æ–≤:", reply_markup=guidepage_admin_menu())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≥–∞–π–¥–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
def render_delete_tree_page(page: int = 0) -> tuple[str, InlineKeyboardMarkup | None]:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≥–∞–π–¥–æ–≤ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
    parents = session.query(GuidePage).filter_by(parent_code=None).order_by(GuidePage.created_at).all()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * DELETE_PAGE_SIZE
    end = start + DELETE_PAGE_SIZE
    visible = parents[start:end]

    lines = []
    for p in visible:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª –∏ –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        lines.append(f"üóÇ <b>{p.title}</b> ‚Äî /{p.code}")
        children = session.query(GuidePage).filter_by(parent_code=p.code).order_by(GuidePage.created_at).all()
        for ch in children:
            lines.append(f"  üìÑ {ch.title} ‚Äî /{ch.code}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>\n\n" + "\n".join(lines)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"del_page:{page - 1}"))
    if end < len(parents):
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"del_page:{page + 1}"))

    kb = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None
    return text, kb  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å –≥–∞–π–¥"
@router.message(lambda m: m.text and "–£–¥–∞–ª–∏—Ç—å –≥–∞–π–¥" in m.text)
async def start_delete(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(from_menu="admin_guides")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    await state.set_state(DeleteGuidePage.target_code)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É FSM
    text, kb = render_delete_tree_page(0)  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ä–µ–≤–∞
    await safe_answer(message, text, parse_mode="HTML", reply_markup=kb)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–∞–π–¥–æ–≤
@router.callback_query(StateFilter(DeleteGuidePage.target_code), lambda c: c.data.startswith("del_page:"))
async def paginate_delete_tree(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback
    page = int(callback.data.split(":")[1])
    text, kb = render_delete_tree_page(page)  # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ä–µ–≤–∞
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–∞–π–¥–∞
@router.message(StateFilter(DeleteGuidePage.target_code))
async def confirm_delete_code(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≥–∞–π–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    code = message.text.strip().lstrip("/").split("@")[0]

    # –ò—â–µ–º –≥–∞–π–¥ –ø–æ –∫–æ–¥—É
    page = session.query(GuidePage).filter_by(code=code).first()
    if not page:
        await safe_answer(message, "‚ùå –ì–∞–π–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≥–∞–π–¥–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    pending_deletions[message.from_user.id] = code
    await safe_answer(
        message,
        f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–∞–π–¥ <b>{page.title}</b> ‚Äî /{code}?",
        parse_mode="HTML",
        reply_markup=delete_confirm_keyboard  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
async def confirm_delete_reply(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≥–∞–π–¥–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    code = pending_deletions.pop(message.from_user.id, None)
    if not code:
        await safe_answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —É–¥–∞–ª—è—Ç—å.")
        return

    # –ò—â–µ–º –≥–∞–π–¥ –ø–æ –∫–æ–¥—É
    page = session.query(GuidePage).filter_by(code=code).first()
    if page:
        session.delete(page)  # –£–¥–∞–ª—è–µ–º –≥–∞–π–¥
        session.commit()
        await safe_answer(
            message,
            f"üóë –ì–∞–π–¥ <b>{page.title}</b> ‚Äî /{code} —É–¥–∞–ª—ë–Ω.",
            parse_mode="HTML"
        )
    else:
        await safe_answer(message, f"‚ùå –ì–∞–π–¥ /{code} –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

    await safe_answer(message, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–∞–π–¥–æ–≤:", reply_markup=guidepage_admin_menu())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.message(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
async def cancel_delete_reply(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    pending_deletions.pop(message.from_user.id, None)
    await safe_answer(message, "‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=guidepage_admin_menu())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∞–π–¥–æ–≤
@router.message(lambda m: m.text and "–°–ø–∏—Å–æ–∫ –≥–∞–π–¥–æ–≤" in m.text)
async def show_full_guide_list(message: Message):
    text, kb = build_list_tree()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–∞–π–¥–æ–≤
    await safe_answer(message, text, parse_mode="HTML", reply_markup=kb)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
LIST_PAGE_SIZE = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def build_list_tree(page=0):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    parents = (
        session.query(GuidePage)
        .filter_by(parent_code=None)
        .order_by(GuidePage.created_at)
        .all()
    )

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * LIST_PAGE_SIZE
    end = start + LIST_PAGE_SIZE
    visible = parents[start:end]

    lines = []
    for p in visible:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª –∏ –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        lines.append(f"üìÇ /{p.code} ‚Äî {p.title}")
        children = (
            session.query(GuidePage)
            .filter_by(parent_code=p.code)
            .order_by(GuidePage.created_at)
            .all()
        )
        for ch in children:
            lines.append(f"  ‚îî üìÑ /{ch.code} ‚Äî {ch.title}")

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb = []
    if page > 0:
        kb.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_page:{page - 1}"))
    if end < len(parents):
        kb.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"list_page:{page + 1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[kb]) if kb else None
    return "<b>üìÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∞–π–¥–æ–≤:</b>\n\n" + "\n".join(lines), keyboard


#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def build_guide_pagination_kb(page: int, total: int, parent_code: str):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"guide:{parent_code}:{page - 1}"))
    if (page + 1) * ITEMS_PER_PAGE < total:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"guide:{parent_code}:{page + 1}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ "/–∫–æ–¥"
@router.message(lambda m: m.text and m.text.startswith("/"))
async def handle_any_guide_command(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≥–∞–π–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    code = message.text[1:].split()[0].split("@")[0]

    # –ò—â–µ–º –≥–∞–π–¥ –ø–æ –∫–æ–¥—É
    page = session.query(GuidePage).filter_by(code=code).first()
    if not page:
        return  # –ï—Å–ª–∏ –≥–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    children = session.query(GuidePage).filter_by(parent_code=page.code).order_by(GuidePage.created_at).all()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
    await state.set_state(GuidePaginationState.browsing)
    await state.update_data(parent_code=page.code)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_index = 0
    sliced = children[page_index * ITEMS_PER_PAGE: (page_index + 1) * ITEMS_PER_PAGE]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"<b>{page.title}</b>\n\n"
    if page.text:
        text += f"{page.text.strip()}\n"

    if sliced:
        text += "\n<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        for child in sliced:
            text += f"‚Ä¢ /{child.code} ‚Äî {child.title}\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª "map", –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏—è—Ö
    if page.code == "map":
        locations = session.query(LocationInfo).order_by(LocationInfo.km).all()
        if locations:
            text += "\n<b>üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö:</b>\n\n"
            for loc in locations:
                name = loc.title or f"{loc.km} –∫–º"
                emoji = name.strip().split()[0] if name.startswith(("‚ö°Ô∏è", "‚ö†Ô∏è", "üíÄ", "üèï", "‚ùÑÔ∏è")) else ""
                clean_name = name.replace(emoji, "").strip() if emoji else name
                text += f"‚ñ™Ô∏è {emoji} {clean_name} ({loc.km} –∫–º) ‚Äî /loc_{loc.km}\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb = build_guide_pagination_kb(page_index, len(children), page.code)
    await safe_answer(message, text.strip(), parse_mode="HTML", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥–∞–π–¥–æ–≤
@router.callback_query(StateFilter(GuidePaginationState.browsing))
async def paginate_guides(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    _, parent_code, page_index_str = callback.data.split(":")
    page_index = int(page_index_str)
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    page = session.query(GuidePage).filter_by(code=parent_code).first()
    children = session.query(GuidePage).filter_by(parent_code=parent_code).order_by(GuidePage.created_at).all()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page_index * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    sliced = children[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"<b>{page.title}</b>\n\n"
    if sliced:
        text += "<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        for child in sliced:
            text += f"‚Ä¢ /{child.code} ‚Äî {child.title}\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª "map", –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏—è—Ö
    if page.code == "map":
        locations = session.query(LocationInfo).order_by(LocationInfo.km).all()
        if locations:
            text += "\n<b>üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö:</b>\n\n"
            for loc in locations:
                name = loc.title or f"{loc.km} –∫–º"
                emoji = name.strip().split()[0] if name.startswith(("‚ö°Ô∏è", "‚ö†Ô∏è", "üíÄ", "üèï", "‚ùÑÔ∏è")) else ""
                clean_name = name.replace(emoji, "").strip() if emoji else name
                text += f"‚ñ™Ô∏è {emoji} {clean_name} ({loc.km} –∫–º) ‚Äî /loc_{loc.km}\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb = build_guide_pagination_kb(page_index, len(children), parent_code)
    await callback.message.edit_text(text.strip(), parse_mode="HTML", reply_markup=kb)
