from utils.safe_send import safe_answer, safe_send_message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from pytz import timezone

from states.raid_states import RaidEventCreate
from database.models import RaidEvent, User
from database.db import session
from keyboards.cancel import cancel_keyboard
from datetime import datetime, timedelta

router = Router()


@router.message(F.text == "‚ûï –ù–æ–≤—ã–π —Ä–µ–π–¥")
async def start_create_raid(message: Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–π–¥–∞
    await state.set_state(RaidEventCreate.name)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–π–¥–∞
    await safe_answer(message, "üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–π–¥–∞:", reply_markup=cancel_keyboard())


@router.message(StateFilter(RaidEventCreate.name))
async def input_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(name=message.text.strip())

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–Ω–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    squads = session.query(User.squad).distinct().filter(User.squad.isnot(None)).all()
    squads = [s[0] for s in squads if s[0]]

    # –ï—Å–ª–∏ –±–∞–Ω–¥ –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if not squads:
        await safe_answer(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–¥ –≤ –±–∞–∑–µ.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(squad_choices=squads)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–¥
    lines = [f"{i+1}. {squad}" for i, squad in enumerate(squads)]
    lines.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–∞–Ω–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä: 1,3)")
    lines.append("0 ‚Äî –í—Å–µ –±–∞–Ω–¥—ã\n* ‚Äî –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
    await state.set_state(RaidEventCreate.squad)
    await safe_answer(message, "ü¶æ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–¥—ã –¥–ª—è —Ä–µ–π–¥–∞:\n" + "\n".join(lines))


@router.message(StateFilter(RaidEventCreate.squad))
async def input_squad(message: Message, state: FSMContext):
    raw = message.text.strip()
    data = await state.get_data()
    squads = data.get("squad_choices", [])

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if raw == "*":
        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        squad = "ALL_USERS"
    elif raw == "0":
        # –í—Å–µ –±–∞–Ω–¥—ã
        squad = "ALL_SQUADS"
    else:
        try:
            indexes = [int(x) for x in raw.split(",")]  # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞
            selected = [squads[i - 1] for i in indexes if 0 < i <= len(squads)]  # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –±–∞–Ω–¥—ã
            if not selected:
                raise ValueError
            squad = ", ".join(selected)  # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É
        except:
            await safe_answer(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–∞–Ω–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∞–Ω–¥—ã
    await state.update_data(squad=squad)
    await state.set_state(RaidEventCreate.time)
    moscow = timezone('Europe/Moscow')
    current_time = datetime.now(moscow) + timedelta(hours=2)
    example_time = current_time.strftime("%d.%m %H:%M")

    await safe_answer(
        message,
        f"üïî –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {example_time}):",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(RaidEventCreate.time))
async def input_time(message: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        user_input = message.text.strip()
        naive_dt = datetime.strptime(user_input, "%d.%m %H:%M")
        current_year = datetime.now().year
        naive_dt = naive_dt.replace(year=current_year)
        moscow = timezone('Europe/Moscow')
        local_dt = moscow.localize(naive_dt)
    except Exception as e:
        await safe_answer(message, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 25.06 23:00\n–û—à–∏–±–∫–∞: {e}")
        return

    data = await state.get_data()
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–π–¥ —Å —è–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    new_raid = RaidEvent(
        name=data["name"],
        squad=data["squad"],
        start_time=local_dt,
        status="active"
    )
    session.add(new_raid)
    session.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–π–¥–∞ –≤ FSM –¥–ª—è –ø–∏–Ω–∞
    await state.update_data(raid_id=new_raid.id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –í—ã–¥–∞—Ç—å –ø–∏–Ω –¥–ª—è —Ä–µ–π–¥–∞")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
    )

    msg_time = local_dt.strftime('%d.%m.%Y %H:%M')
    await safe_answer(
        message,
        f"‚úÖ –†–µ–π–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüïì –°—Ç–∞—Ä—Ç: {msg_time}\n–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å –ø–∏–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π–¥–∞?",
        reply_markup=keyboard
    )
    await state.clear()  # –û—á–∏—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π–¥–∞
    await state.update_data(raid_id=new_raid.id, from_menu="raid_admin")  # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∏–Ω–∞
