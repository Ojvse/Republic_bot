from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from database.db import session
from database.models import User, RaidEvent, RaidParticipation, RaidReminder, RaidPinData
from utils.safe_send import safe_answer

router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–π–¥–∞ (–∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–û—Ç–º–µ–Ω–∏—Ç—å", "–ù–∞–ø–æ–º–Ω–∏—Ç—å")
def build_raid_markup(raid_id: int, user_participates: bool) -> InlineKeyboardMarkup:
    first_row = []
    if user_participates:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∞ "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã" –∏ "–Ø –Ω–µ –∏–¥—É"
        first_row.append(
            InlineKeyboardButton(text=f"‚öî –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã", callback_data=f"raid_join_{raid_id}")
        )
        first_row.append(
            InlineKeyboardButton(text=f"üö´ –Ø –Ω–µ –∏–¥—É", callback_data=f"raid_leave_{raid_id}")
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∞ "–Ø –∏–¥—É!" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        first_row.append(
            InlineKeyboardButton(text=f"‚öî –Ø –∏–¥—É!", callback_data=f"raid_join_{raid_id}")
        )
        first_row.append(
            InlineKeyboardButton(text=f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"raid_leave_{raid_id}")
        )
    second_row = [
        InlineKeyboardButton(text=f"üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"remind_{raid_id}")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[first_row, second_row])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π–¥–æ–≤
@router.callback_query(F.data == "raid_upcoming")
async def raid_upcoming_handler(callback: CallbackQuery):
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    now = datetime.utcnow()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥—É—â–∏—Ö —Ä–µ–π–¥–æ–≤
    events = (
        session.query(RaidEvent)
        .filter(RaidEvent.start_time >= now, RaidEvent.status == "active")  # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
        .order_by(RaidEvent.start_time.asc())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)
        .limit(5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5
        .all()
    )

    if not events:
        # –ï—Å–ª–∏ —Ä–µ–π–¥–æ–≤ –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await safe_answer(callback.message, "‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–π–¥–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = session.query(User).filter_by(game_id=callback.from_user.id).first()

    for ev in events:
        dt = ev.start_time.strftime("%d.%m %H:%M")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–∫–æ–Ω–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
        icon = {"active": "‚è≥", "finished": "‚úÖ", "cancelled": "‚ùå"}
        text = (
            f"{icon.get(ev.status, '‚ùì')} <b>–†–µ–π–¥:</b> {ev.name}\n"
            f"üïî <b>–í—Ä–µ–º—è:</b> {dt}\n"
            f"üéØ <b>–ë–∞–Ω–¥–∞:</b> {ev.squad}"
        )

        participates = False
        if user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–π–¥
            participates = (
                session.query(RaidParticipation)
                .filter_by(raid_id=ev.id, user_id=user.id)
                .first()
                is not None
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π–¥–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await safe_answer(
            callback.message,
            text,
            parse_mode="HTML",
            reply_markup=build_raid_markup(ev.id, participates),
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–π–¥
@router.callback_query(F.data.startswith("raid_join_"))
async def raid_join_handler(callback: CallbackQuery):
    _, _, sid = callback.data.split("_")
    raid_id = int(sid)  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–π–¥–∞

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–π–¥
    user = session.query(User).filter_by(game_id=callback.from_user.id).first()
    raid = session.query(RaidEvent).filter_by(id=raid_id).first()
    if not user or not raid:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ä–µ–π–¥–µ
    part = session.query(RaidParticipation).filter_by(raid_id=raid_id, user_id=user.id).first()
    if part:
        part.status = "–∑–∞–ø–∏—Å–∞–ª—Å—è"
        part.joined_at = now
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–∏—è
        session.add(RaidParticipation(
            raid_id=raid_id,
            user_id=user.id,
            status="–∑–∞–ø–∏—Å–∞–ª—Å—è",
            joined_at=now,
        ))
    session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–Ω–∞
    pin_data = session.query(RaidPinData).filter_by(raid_id=raid.id).first()

    title = pin_data.title if pin_data else raid.name
    km = pin_data.km if pin_data else "–ù–µ —É–∫–∞–∑–∞–Ω"
    description = pin_data.description if pin_data else ""

    dt = raid.start_time.strftime("%d.%m %H:%M")
    text = (
        f"‚è≥ <b>–†–µ–π–¥:</b> {raid.name}\n"
        f"<b>{title}</b>\n"
        f"–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞:üìç {km} –∫–º\n"
        f"{description}\n"
        f"üïî <b>–í—Ä–µ–º—è:</b> {dt}\n"
        f"üéØ <b>–ë–∞–Ω–¥–∞:</b> {raid.squad or '–ù–µ—Ç'}\n"
        f"üìå <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> ‚öî –ó–∞–ø–∏—Å–∞–ª—Å—è"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öî –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã", callback_data=f"raid_join_{raid.id}"),
            InlineKeyboardButton(text="üö´ –Ø –Ω–µ –∏–¥—É", callback_data=f"raid_leave_{raid.id}")
        ],
        [
            InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"remind_{raid.id}")
        ]
    ])

    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–µ–π–¥!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ–π–¥–µ
@router.callback_query(F.data.startswith("remind_"))
async def remind_user(callback: CallbackQuery):
    _, sid = callback.data.split("_")
    raid_id = int(sid)  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–π–¥–∞

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter_by(game_id=callback.from_user.id).first()
    if not user:
        await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    exists = (
        session.query(RaidReminder)
        .filter_by(raid_id=raid_id, user_id=user.id)
        .first()
    )
    if exists:
        await callback.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    session.add(RaidReminder(raid_id=raid_id, user_id=user.id))
    session.commit()
    await callback.answer("‚úÖ –ù–∞–ø–æ–º–Ω–∏–º –∑–∞ —á–∞—Å –¥–æ —Ä–µ–π–¥–∞.")
